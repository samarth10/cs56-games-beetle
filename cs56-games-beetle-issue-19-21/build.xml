<project default="compile">
  <!-- build.xml for Choice Points 3, W12, CS56 name: Dennis Huynh and Aki Stankoski-->
  
    <property environment="env"/> <!-- load the environment variables --> 
    <property name="webRoot"     value="${env.HOME}/public_html/"/>
    <property name="webBaseURL"  value="http://www.cs.ucsb.edu/~${env.USER}"/>
    <property name="course"      value="CS56" />
    <property name="quarter"     value="F16" />
    <property name="issueNum"    value="0000705" />
    <property name="mainClass"   value="edu.ucsb.cs56.projects.games.Main" />
    <property name="projectName" value="cs56/cs56-games-beetle"/>
    <property name="projectPath" value="${course}/${quarter}/issues/${issueNum}"/>
    <property name="javadocDest" value="${webRoot}/${projectName}/javadoc"/>
    <!--"~/public_html/cs56/cs56-games-beetle/javadoc"/> -->
    <property name="javadocURL"  value="${webBaseURL}/${projectName}/javadoc"/>
  
    <target name="compile" description="compile the program">
        <mkdir dir="build" /> <!--/edu/ucsb/cs56/projects/games" /> -->
        <javac srcdir="src/edu/ucsb/cs56/projects/games" destdir="build" debug="true"
            debuglevel="lines,source" includeantruntime="false">
            <classpath>
                <pathelement location="build"/>
                <pathelement location="lib/junit-4.8.2.jar"/>
          </classpath>
        </javac>
    </target>

    <target name="run" depends="compile" description="run program">
        <java classname="${mainClass}" classpath="build" fork="true" />
    </target>

    <target name="clean" description="delete unnecessary files and directories">
        <delete dir="build"     quiet="true" />  
        <delete dir= "javadoc"  quiet="true" />
        <delete dir="dist"      quiet="true" />
        <delete dir="download"  quiet="true" />
        <delete dir="temp"      quiet="true" />
    </target>

    <target name="javadoc" depends="compile">
        <delete dir="javadoc" quiet="true" />
        <javadoc destdir="javadoc" author="true" version="true" use="true" >
            <fileset dir="src" includes="**/*.java"/>
            <classpath>
                <pathelement location="lib/junit-4.8.2.jar"/>
            </classpath>
        </javadoc>
        <!-- delete the old javadoc -->
        <delete quiet="true" dir="${javadocDest}" />
        <!-- copy everything you just made to the javadoc destination, and then make it readable -->   
        <copy todir="${javadocDest}" >
            <fileset dir="javadoc"/>
        </copy>
        <!-- Note: this only does the chmod command on the
        javadoc subdirectory and its contents.  You MIGHT have to
        MANUALLY do the chmod on the parent directories.  However,
        you should only need to do that once. -->
        <chmod dir="${javadocDest}" perm="755"  type="dir" includes="**" />
        <chmod dir="${javadocDest}" perm="755"  type="file" includes="**/*" />
        <echo>Javadoc deployed to ${javadocURL}</echo>

    </target>

    <target name="test" depends="compile" description="Test the program">
        <junit haltonerror="no" haltonfailure="no">
            <classpath>
                <pathelement location="lib/junit-4.8.2.jar"/>
                <pathelement location="build"/>
            </classpath>

            <batchtest fork="yes">
                <fileset dir="src">
                    <!-- this will pick up every class with a name ending in Test -->
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
            <formatter type="plain" usefile="false" />
        </junit>
    </target>

    <target name="jar" depends="compile">
        <mkdir dir="dist" />
        <jar destfile="dist/${projectName}.jar" basedir="build" >
            <manifest>
                <attribute name="Main-Class" value="${mainClass}"/>
            </manifest>
        </jar>
    </target>

    <target name="download" depends="">
        <!-- delete everything under the "temp" and "download" subdirectories
        In Ant, **/* means "all files under any number of directory levels" -->
        <delete quiet="true">
            <fileset dir="temp" includes="**/*" />
            <fileset dir="download" includes="**/*" />
        </delete>
        <!-- create the directories we'll need to stage the zip file and tarballs -->
        <mkdir dir="download" />
        <mkdir dir="temp" />
        <mkdir dir="temp/${projectName}" />
        <!-- copy everything from the current directory that we want to put in the zip
        file/tarball into the temp subdirectory. Exclude things we do NOT want to include
        in the tarball/zip file -->
        <copy todir="temp/${projectName}">
            <fileset dir="." excludes="build/**, javadoc/**, **/*~, temp/**, dist/**, download/**"/>
        </copy>
        <!-- create the tar file from the temp directory -->
        <tar destfile="temp/${projectName}.tar" basedir="temp" includes="${projectName}/**"/>
        <!-- compress the tar file into a tarball (using "gzip") -->
        <gzip zipfile="download/${projectName}.tgz" src="temp/${projectName}.tar" />
        <!-- create a zip file -->
        <zip destfile="download/${projectName}.zip" basedir="temp" includes="${projectName}/**"/>
        <!-- Now we have the tarball and zip file in the download subdirectory, so we are finished
        with the temp directory -->
        <delete quiet="true">
            <fileset dir="temp" includes="**/*"/>
        </delete>

    </target>     

</project>